{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "vim-ORH-ccQb"
      },
      "outputs": [],
      "source": [
        "%matplotlib inline\n",
        "#Visualization Libraries\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "#Data processing Libraries\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "# 10000, 1, 100\n",
        "\n",
        "from sklearn.tree import DecisionTreeClassifier,plot_tree\n",
        "from sklearn.metrics import accuracy_score, confusion_matrix\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "from sklearn.model_selection import train_test_split, cross_val_score\n",
        "from sklearn.metrics import  classification_report\n",
        "\n",
        "from sklearn.tree import DecisionTreeClassifier,plot_tree\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "id": "uj7rI1kiAgVF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(\"/content/drive/MyDrive/health_classification (1).csv\")\n",
        "df.head()"
      ],
      "metadata": {
        "id": "5P9VDBE9ck4q",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 399
        },
        "outputId": "75157549-d98b-41d0-ccb2-e8a6509286e2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                  Name  Age  Gender Blood Type Medical Condition  \\\n",
              "0      Tiffany Ramirez   81  Female         O-          Diabetes   \n",
              "1          Ruben Burns   35    Male         O+            Asthma   \n",
              "2            Chad Byrd   61    Male         B-           Obesity   \n",
              "3    Antonio Frederick   49    Male         B-            Asthma   \n",
              "4  Mrs. Brandy Flowers   51    Male         O-         Arthritis   \n",
              "\n",
              "  Date of Admission          Doctor                   Hospital  \\\n",
              "0        2022-11-17  Patrick Parker           Wallace-Hamilton   \n",
              "1        2023-06-01   Diane Jackson  Burke, Griffin and Cooper   \n",
              "2        2019-01-09      Paul Baker                 Walton LLC   \n",
              "3        2020-05-02  Brian Chandler                 Garcia Ltd   \n",
              "4        2021-07-09  Dustin Griffin    Jones, Brown and Murray   \n",
              "\n",
              "  Insurance Provider  Billing Amount  Room Number Admission Type  \\\n",
              "0           Medicare    37490.983364          146       Elective   \n",
              "1   UnitedHealthcare    47304.064845          404      Emergency   \n",
              "2           Medicare    36874.896997          292      Emergency   \n",
              "3           Medicare    23303.322092          480         Urgent   \n",
              "4   UnitedHealthcare    18086.344184          477         Urgent   \n",
              "\n",
              "  Discharge Date   Medication  Test Results  \n",
              "0     2022-12-01      Aspirin  Inconclusive  \n",
              "1     2023-06-15      Lipitor        Normal  \n",
              "2     2019-02-08      Lipitor        Normal  \n",
              "3     2020-05-03   Penicillin      Abnormal  \n",
              "4     2021-08-02  Paracetamol        Normal  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f23d2eb5-b6b0-4dda-9b41-2e45ff472922\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Name</th>\n",
              "      <th>Age</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Blood Type</th>\n",
              "      <th>Medical Condition</th>\n",
              "      <th>Date of Admission</th>\n",
              "      <th>Doctor</th>\n",
              "      <th>Hospital</th>\n",
              "      <th>Insurance Provider</th>\n",
              "      <th>Billing Amount</th>\n",
              "      <th>Room Number</th>\n",
              "      <th>Admission Type</th>\n",
              "      <th>Discharge Date</th>\n",
              "      <th>Medication</th>\n",
              "      <th>Test Results</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Tiffany Ramirez</td>\n",
              "      <td>81</td>\n",
              "      <td>Female</td>\n",
              "      <td>O-</td>\n",
              "      <td>Diabetes</td>\n",
              "      <td>2022-11-17</td>\n",
              "      <td>Patrick Parker</td>\n",
              "      <td>Wallace-Hamilton</td>\n",
              "      <td>Medicare</td>\n",
              "      <td>37490.983364</td>\n",
              "      <td>146</td>\n",
              "      <td>Elective</td>\n",
              "      <td>2022-12-01</td>\n",
              "      <td>Aspirin</td>\n",
              "      <td>Inconclusive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Ruben Burns</td>\n",
              "      <td>35</td>\n",
              "      <td>Male</td>\n",
              "      <td>O+</td>\n",
              "      <td>Asthma</td>\n",
              "      <td>2023-06-01</td>\n",
              "      <td>Diane Jackson</td>\n",
              "      <td>Burke, Griffin and Cooper</td>\n",
              "      <td>UnitedHealthcare</td>\n",
              "      <td>47304.064845</td>\n",
              "      <td>404</td>\n",
              "      <td>Emergency</td>\n",
              "      <td>2023-06-15</td>\n",
              "      <td>Lipitor</td>\n",
              "      <td>Normal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Chad Byrd</td>\n",
              "      <td>61</td>\n",
              "      <td>Male</td>\n",
              "      <td>B-</td>\n",
              "      <td>Obesity</td>\n",
              "      <td>2019-01-09</td>\n",
              "      <td>Paul Baker</td>\n",
              "      <td>Walton LLC</td>\n",
              "      <td>Medicare</td>\n",
              "      <td>36874.896997</td>\n",
              "      <td>292</td>\n",
              "      <td>Emergency</td>\n",
              "      <td>2019-02-08</td>\n",
              "      <td>Lipitor</td>\n",
              "      <td>Normal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Antonio Frederick</td>\n",
              "      <td>49</td>\n",
              "      <td>Male</td>\n",
              "      <td>B-</td>\n",
              "      <td>Asthma</td>\n",
              "      <td>2020-05-02</td>\n",
              "      <td>Brian Chandler</td>\n",
              "      <td>Garcia Ltd</td>\n",
              "      <td>Medicare</td>\n",
              "      <td>23303.322092</td>\n",
              "      <td>480</td>\n",
              "      <td>Urgent</td>\n",
              "      <td>2020-05-03</td>\n",
              "      <td>Penicillin</td>\n",
              "      <td>Abnormal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Mrs. Brandy Flowers</td>\n",
              "      <td>51</td>\n",
              "      <td>Male</td>\n",
              "      <td>O-</td>\n",
              "      <td>Arthritis</td>\n",
              "      <td>2021-07-09</td>\n",
              "      <td>Dustin Griffin</td>\n",
              "      <td>Jones, Brown and Murray</td>\n",
              "      <td>UnitedHealthcare</td>\n",
              "      <td>18086.344184</td>\n",
              "      <td>477</td>\n",
              "      <td>Urgent</td>\n",
              "      <td>2021-08-02</td>\n",
              "      <td>Paracetamol</td>\n",
              "      <td>Normal</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f23d2eb5-b6b0-4dda-9b41-2e45ff472922')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f23d2eb5-b6b0-4dda-9b41-2e45ff472922 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f23d2eb5-b6b0-4dda-9b41-2e45ff472922');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0c99c0ea-5a79-4b81-9c56-8d919c093864\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0c99c0ea-5a79-4b81-9c56-8d919c093864')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0c99c0ea-5a79-4b81-9c56-8d919c093864 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 120
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Tiền xử lý"
      ],
      "metadata": {
        "id": "fcQ1cPLQCQIP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# In ra thông tin tổng quan của DataFrame 'df', bao gồm thông tin về cột và kiểu dữ liệu\n",
        "df.info()"
      ],
      "metadata": {
        "id": "kIMIFchwckzy",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "52b6b30f-5103-4e95-e862-71785f660daa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 10000 entries, 0 to 9999\n",
            "Data columns (total 15 columns):\n",
            " #   Column              Non-Null Count  Dtype  \n",
            "---  ------              --------------  -----  \n",
            " 0   Name                10000 non-null  object \n",
            " 1   Age                 10000 non-null  int64  \n",
            " 2   Gender              10000 non-null  object \n",
            " 3   Blood Type          10000 non-null  object \n",
            " 4   Medical Condition   10000 non-null  object \n",
            " 5   Date of Admission   10000 non-null  object \n",
            " 6   Doctor              10000 non-null  object \n",
            " 7   Hospital            10000 non-null  object \n",
            " 8   Insurance Provider  10000 non-null  object \n",
            " 9   Billing Amount      10000 non-null  float64\n",
            " 10  Room Number         10000 non-null  int64  \n",
            " 11  Admission Type      10000 non-null  object \n",
            " 12  Discharge Date      10000 non-null  object \n",
            " 13  Medication          10000 non-null  object \n",
            " 14  Test Results        10000 non-null  object \n",
            "dtypes: float64(1), int64(2), object(12)\n",
            "memory usage: 1.1+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Kiểm tra và in ra số lượng giá trị thiếu (NaN) trong từng cột của DataFrame 'df'\n",
        "df.isna().sum()"
      ],
      "metadata": {
        "id": "7K8lHMVBpMQk",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fdc199b5-017c-4c57-bb84-96a9c996037b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Name                  0\n",
              "Age                   0\n",
              "Gender                0\n",
              "Blood Type            0\n",
              "Medical Condition     0\n",
              "Date of Admission     0\n",
              "Doctor                0\n",
              "Hospital              0\n",
              "Insurance Provider    0\n",
              "Billing Amount        0\n",
              "Room Number           0\n",
              "Admission Type        0\n",
              "Discharge Date        0\n",
              "Medication            0\n",
              "Test Results          0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 122
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Hiển thị hình dạng của DataFrame 'df', tức số dòng và số cột\n",
        "df.shape"
      ],
      "metadata": {
        "id": "4qam5_qDpPIK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "95353f1d-b19f-464a-8d2d-5835e5182a48"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(10000, 15)"
            ]
          },
          "metadata": {},
          "execution_count": 123
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Hiển thị các thống kê mô tả cơ bản (mean, min, max, etc.) cho các cột có giá trị số\n",
        "df.describe()"
      ],
      "metadata": {
        "id": "JA1ytgzrpN2r",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "outputId": "b091f787-6124-48f3-c359-c632cfff537d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                Age  Billing Amount   Room Number\n",
              "count  10000.000000    10000.000000  10000.000000\n",
              "mean      51.452200    25516.806778    300.082000\n",
              "std       19.588974    14067.292709    115.806027\n",
              "min       18.000000     1000.180837    101.000000\n",
              "25%       35.000000    13506.523967    199.000000\n",
              "50%       52.000000    25258.112566    299.000000\n",
              "75%       68.000000    37733.913727    400.000000\n",
              "max       85.000000    49995.902283    500.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-033eeea5-66e4-4a1d-a7e1-e7de40879a59\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Billing Amount</th>\n",
              "      <th>Room Number</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>10000.000000</td>\n",
              "      <td>10000.000000</td>\n",
              "      <td>10000.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>51.452200</td>\n",
              "      <td>25516.806778</td>\n",
              "      <td>300.082000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>19.588974</td>\n",
              "      <td>14067.292709</td>\n",
              "      <td>115.806027</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>18.000000</td>\n",
              "      <td>1000.180837</td>\n",
              "      <td>101.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>35.000000</td>\n",
              "      <td>13506.523967</td>\n",
              "      <td>199.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>52.000000</td>\n",
              "      <td>25258.112566</td>\n",
              "      <td>299.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>68.000000</td>\n",
              "      <td>37733.913727</td>\n",
              "      <td>400.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>85.000000</td>\n",
              "      <td>49995.902283</td>\n",
              "      <td>500.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-033eeea5-66e4-4a1d-a7e1-e7de40879a59')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-033eeea5-66e4-4a1d-a7e1-e7de40879a59 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-033eeea5-66e4-4a1d-a7e1-e7de40879a59');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5b7ca326-ce0f-451c-980a-961388eb113d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5b7ca326-ce0f-451c-980a-961388eb113d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5b7ca326-ce0f-451c-980a-961388eb113d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 124
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Danh sách các cột không cần thiết\n",
        "columns_to_drop = ['Name', 'Date of Admission', 'Doctor', 'Hospital', 'Billing Amount',\n",
        "                   'Room Number', 'Admission Type', 'Discharge Date', 'Insurance Provider']\n",
        "\n",
        "# Loại bỏ các cột không cần thiết từ DataFrame\n",
        "df_cleaned = df.drop(columns=columns_to_drop)\n",
        "\n",
        "# In ra thông tin của DataFrame sau khi loại bỏ\n",
        "print(df_cleaned.info())\n"
      ],
      "metadata": {
        "id": "EbbyIPRkqMt1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "21c0c284-dc69-4dea-8839-d009ae4213d3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 10000 entries, 0 to 9999\n",
            "Data columns (total 6 columns):\n",
            " #   Column             Non-Null Count  Dtype \n",
            "---  ------             --------------  ----- \n",
            " 0   Age                10000 non-null  int64 \n",
            " 1   Gender             10000 non-null  object\n",
            " 2   Blood Type         10000 non-null  object\n",
            " 3   Medical Condition  10000 non-null  object\n",
            " 4   Medication         10000 non-null  object\n",
            " 5   Test Results       10000 non-null  object\n",
            "dtypes: int64(1), object(5)\n",
            "memory usage: 468.9+ KB\n",
            "None\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#kiểm tra cột xem sử dụng dữ liệu nào\n",
        "print(df.dtypes)\n"
      ],
      "metadata": {
        "id": "2lpTUykbeZYZ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0ab8f32b-f6f4-41a3-bdf6-480846396e52"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Name                   object\n",
            "Age                     int64\n",
            "Gender                 object\n",
            "Blood Type             object\n",
            "Medical Condition      object\n",
            "Date of Admission      object\n",
            "Doctor                 object\n",
            "Hospital               object\n",
            "Insurance Provider     object\n",
            "Billing Amount        float64\n",
            "Room Number             int64\n",
            "Admission Type         object\n",
            "Discharge Date         object\n",
            "Medication             object\n",
            "Test Results           object\n",
            "dtype: object\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "correlation_matrix = df.corr()\n",
        "print(\"Correlation Matrix:\")\n",
        "print(correlation_matrix)\n",
        "plt.figure(figsize=(10, 8))\n",
        "sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=\".2f\")\n",
        "plt.title(\"Correlation Heatmap\")\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "s7I8dqOLzsZT",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 840
        },
        "outputId": "d3754a89-59cd-4fcf-a8bc-d9eef2a18ba5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Correlation Matrix:\n",
            "                     Age  Billing Amount  Room Number\n",
            "Age             1.000000       -0.009483    -0.005371\n",
            "Billing Amount -0.009483        1.000000    -0.006160\n",
            "Room Number    -0.005371       -0.006160     1.000000\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-127-cba7070ae539>:1: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
            "  correlation_matrix = df.corr()\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Giả sử 'Test Results' là biến mục tiêu của bạn\n",
        "X = df.drop('Test Results', axis=1)\n",
        "y = df['Test Results']"
      ],
      "metadata": {
        "id": "G6qsZP6wwI-6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Thực hiện mã hóa nhãn cho các biến phân loại nếu cần\n",
        "# Đơn giản, chúng ta sẽ mã hóa tất cả các cột kiểu object\n",
        "object_cols = X.select_dtypes(include=['object']).columns\n",
        "label_encoder = LabelEncoder()\n",
        "X[object_cols] = X[object_cols].apply(label_encoder.fit_transform)"
      ],
      "metadata": {
        "id": "lNrnVPfhwKUC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Chia dữ liệu thành tập huấn luyện và tập kiểm thử\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
      ],
      "metadata": {
        "id": "5enEgyZcwM_C"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Random Forest"
      ],
      "metadata": {
        "id": "I5-bJkK5uOtN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Tạo một mô hình Random Forest\n",
        "rf_classifier = RandomForestClassifier(random_state=42)\n",
        "# Huấn luyện mô hình trên dữ liệu huấn luyện\n",
        "rf_classifier.fit(X_train, y_train)\n",
        "# Đưa ra dự đoán trên tập kiểm thử\n",
        "y_pred = rf_classifier.predict(X_test)\n",
        "# Đánh giá hiệu suất của mô hình\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(f'Độ chính xác: {accuracy:.2f}')\n",
        "# In báo cáo phân loại\n",
        "print('Báo cáo phân loại:')\n",
        "print(classification_report(y_test, y_pred))"
      ],
      "metadata": {
        "id": "hcxvnl5xsGbk",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "06c58299-3aa5-4214-9880-743661611023"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Độ chính xác: 0.33\n",
            "Báo cáo phân loại:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "    Abnormal       0.35      0.38      0.37       706\n",
            "Inconclusive       0.31      0.32      0.32       636\n",
            "      Normal       0.33      0.29      0.31       658\n",
            "\n",
            "    accuracy                           0.33      2000\n",
            "   macro avg       0.33      0.33      0.33      2000\n",
            "weighted avg       0.33      0.33      0.33      2000\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Decision Tree"
      ],
      "metadata": {
        "id": "Inclc-jhu4Cm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Initialize the Decision Tree classifier\n",
        "dt_classifier = DecisionTreeClassifier(random_state=42)\n",
        "# Train the model on the training set\n",
        "dt_classifier.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the test set\n",
        "y_pred = dt_classifier.predict(X_test)\n",
        "\n",
        "# Evaluate the accuracy of the model\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(f\"Decision Tree Accuracy: {accuracy}\")"
      ],
      "metadata": {
        "id": "oqvPf70WqYH1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0c415bf6-7291-4db7-f4ce-b8c6e257c17d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Decision Tree Accuracy: 0.3195\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a confusion matrix\n",
        "cm = confusion_matrix(y_test, y_pred)\n",
        "\n",
        "# Display the confusion matrix using a heatmap\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\", cbar=False,\n",
        "            xticklabels=[\"Abnormal\", \"Inconclusive\",\"Normal\"], yticklabels=[\"Abnormal\", \"Inconclusive\",\"Normal\"])\n",
        "plt.xlabel('Predicted')\n",
        "plt.ylabel('True')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "2wW7p3G4rB_O",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "outputId": "19ed9379-151e-4eaa-840f-e3f5fa74bc9a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Visualize a truncated Decision Tree with a maximum depth\n",
        "plt.figure(figsize=(12, 8))\n",
        "plot_tree(dt_classifier, filled=True, feature_names=X.columns, class_names=[\"Abnormal\", \"Inconclusive\", \"Normal\"], max_depth=3)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "xZ3-uFX2rHv8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 653
        },
        "outputId": "0c55f628-3d0b-4dcb-bf25-fda3c3bd0155"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Find the best max-depth for DT algorithm\n",
        "# Define a range of max_depth values to iterate over\n",
        "max_depth_values = range(3    , 20)  # You can adjust this range\n",
        "\n",
        "# Initialize variables to keep track of the best max depth and corresponding score\n",
        "best_max_depth = None\n",
        "best_score = 0.0\n",
        "\n",
        "# Iterate over different max_depth values\n",
        "for max_depth in max_depth_values:\n",
        "    # Initialize the DecisionTreeClassifier with the current max_depth\n",
        "    clf = DecisionTreeClassifier(max_depth=max_depth, random_state=42)\n",
        "    # Fit the model to the training data\n",
        "    clf.fit(X_train, y_train)\n",
        "    # Evaluate the model on the test data\n",
        "    test_score = clf.score(X_test, y_test)\n",
        "    # Perform cross-validation on the training data\n",
        "    #cv_score = cross_val_score(clf, X_train, y_train, cv=5).mean()\n",
        "\n",
        "    # Print the score for the current max_depth\n",
        "    print(f\"Max Depth = {max_depth}: Test Score = {test_score}\")\n",
        "    # Check if the current model has a better score than the previous best\n",
        "    if test_score > best_score:\n",
        "        best_score = test_score\n",
        "        best_max_depth = max_depth\n",
        "\n",
        "# Print the best max depth and corresponding score\n",
        "print(f\"Best Max Depth = {best_max_depth}: Best Test Score = {best_score}\")"
      ],
      "metadata": {
        "id": "nnNOWyfYrl9M",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "190542ea-fb92-4f5e-9254-f545d7ac6613"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Max Depth = 3: Test Score = 0.351\n",
            "Max Depth = 4: Test Score = 0.351\n",
            "Max Depth = 5: Test Score = 0.3335\n",
            "Max Depth = 6: Test Score = 0.349\n",
            "Max Depth = 7: Test Score = 0.347\n",
            "Max Depth = 8: Test Score = 0.3295\n",
            "Max Depth = 9: Test Score = 0.314\n",
            "Max Depth = 10: Test Score = 0.3235\n",
            "Max Depth = 11: Test Score = 0.3275\n",
            "Max Depth = 12: Test Score = 0.3225\n",
            "Max Depth = 13: Test Score = 0.32\n",
            "Max Depth = 14: Test Score = 0.3195\n",
            "Max Depth = 15: Test Score = 0.3195\n",
            "Max Depth = 16: Test Score = 0.316\n",
            "Max Depth = 17: Test Score = 0.3275\n",
            "Max Depth = 18: Test Score = 0.3305\n",
            "Max Depth = 19: Test Score = 0.331\n",
            "Best Max Depth = 3: Best Test Score = 0.351\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import cross_val_score\n",
        "# Perform 10-fold cross-validation\n",
        "scores = cross_val_score(clf, X, y, cv=10)\n",
        "# Print the cross-validation scores\n",
        "print(\"Cross-Validation Scores:\", scores)\n",
        "print(\"Mean CV Score:\", scores.mean())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ncIfoV8Ls5lU",
        "outputId": "398e0d07-af5a-4528-a185-a6fe6b6f20a6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cross-Validation Scores: [0.356 0.33  0.323 0.313 0.333 0.326 0.322 0.333 0.349 0.312]\n",
            "Mean CV Score: 0.3297\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.tree import export_text\n",
        "# Export the text representation of the decision tree\n",
        "tree_rules = export_text(clf, feature_names=X.columns.tolist())\n",
        "print(tree_rules)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dXSY_GjvtbuK",
        "outputId": "e65bd300-4ca2-4224-e2af-83717b01d751"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "|--- Name <= 500.50\n",
            "|   |--- Doctor <= 8661.50\n",
            "|   |   |--- Billing Amount <= 26787.93\n",
            "|   |   |   |--- Hospital <= 636.00\n",
            "|   |   |   |   |--- Medical Condition <= 0.50\n",
            "|   |   |   |   |   |--- Room Number <= 310.00\n",
            "|   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |--- Room Number >  310.00\n",
            "|   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |--- Medical Condition >  0.50\n",
            "|   |   |   |   |   |--- Name <= 482.00\n",
            "|   |   |   |   |   |   |--- Room Number <= 166.50\n",
            "|   |   |   |   |   |   |   |--- Room Number <= 156.50\n",
            "|   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |--- Room Number >  156.50\n",
            "|   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |--- Room Number >  166.50\n",
            "|   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |--- Name >  482.00\n",
            "|   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |--- Hospital >  636.00\n",
            "|   |   |   |   |--- Room Number <= 124.00\n",
            "|   |   |   |   |   |--- Hospital <= 3415.00\n",
            "|   |   |   |   |   |   |--- Medication <= 1.50\n",
            "|   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |--- Medication >  1.50\n",
            "|   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |--- Hospital >  3415.00\n",
            "|   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |--- Room Number >  124.00\n",
            "|   |   |   |   |   |--- Date of Admission <= 1716.00\n",
            "|   |   |   |   |   |   |--- Date of Admission <= 672.00\n",
            "|   |   |   |   |   |   |   |--- Room Number <= 424.00\n",
            "|   |   |   |   |   |   |   |   |--- Blood Type <= 6.50\n",
            "|   |   |   |   |   |   |   |   |   |--- Room Number <= 176.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Age <= 57.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Age >  57.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |   |   |--- Room Number >  176.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Medication <= 0.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Medication >  0.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6\n",
            "|   |   |   |   |   |   |   |   |--- Blood Type >  6.50\n",
            "|   |   |   |   |   |   |   |   |   |--- Discharge Date <= 600.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |   |   |--- Discharge Date >  600.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |--- Room Number >  424.00\n",
            "|   |   |   |   |   |   |   |   |--- Doctor <= 3363.00\n",
            "|   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |   |--- Doctor >  3363.00\n",
            "|   |   |   |   |   |   |   |   |   |--- Discharge Date <= 585.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |   |   |--- Discharge Date >  585.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Medical Condition <= 2.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Medical Condition >  2.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |--- Date of Admission >  672.00\n",
            "|   |   |   |   |   |   |   |--- Date of Admission <= 738.00\n",
            "|   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |--- Date of Admission >  738.00\n",
            "|   |   |   |   |   |   |   |   |--- Billing Amount <= 8435.33\n",
            "|   |   |   |   |   |   |   |   |   |--- Blood Type <= 0.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Room Number <= 315.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Room Number >  315.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |   |   |--- Blood Type >  0.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Name <= 471.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Name >  471.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |   |--- Billing Amount >  8435.33\n",
            "|   |   |   |   |   |   |   |   |   |--- Age <= 28.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Doctor <= 778.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Doctor >  778.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3\n",
            "|   |   |   |   |   |   |   |   |   |--- Age >  28.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Room Number <= 329.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Room Number >  329.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6\n",
            "|   |   |   |   |   |--- Date of Admission >  1716.00\n",
            "|   |   |   |   |   |   |--- Discharge Date <= 1798.50\n",
            "|   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |--- Discharge Date >  1798.50\n",
            "|   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |--- Billing Amount >  26787.93\n",
            "|   |   |   |--- Age <= 28.50\n",
            "|   |   |   |   |--- Doctor <= 8277.50\n",
            "|   |   |   |   |   |--- Age <= 19.50\n",
            "|   |   |   |   |   |   |--- Insurance Provider <= 1.50\n",
            "|   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |--- Insurance Provider >  1.50\n",
            "|   |   |   |   |   |   |   |--- Name <= 81.00\n",
            "|   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |--- Name >  81.00\n",
            "|   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |--- Age >  19.50\n",
            "|   |   |   |   |   |   |--- Doctor <= 4510.50\n",
            "|   |   |   |   |   |   |   |--- Doctor <= 2284.50\n",
            "|   |   |   |   |   |   |   |   |--- Name <= 409.50\n",
            "|   |   |   |   |   |   |   |   |   |--- Blood Type <= 0.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |   |   |--- Blood Type >  0.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Age <= 22.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Age >  22.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |   |--- Name >  409.50\n",
            "|   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |--- Doctor >  2284.50\n",
            "|   |   |   |   |   |   |   |   |--- Medication <= 0.50\n",
            "|   |   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |   |--- Medication >  0.50\n",
            "|   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |--- Doctor >  4510.50\n",
            "|   |   |   |   |   |   |   |--- Hospital <= 5486.00\n",
            "|   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |--- Hospital >  5486.00\n",
            "|   |   |   |   |   |   |   |   |--- Insurance Provider <= 2.50\n",
            "|   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |   |--- Insurance Provider >  2.50\n",
            "|   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |--- Doctor >  8277.50\n",
            "|   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |--- Age >  28.50\n",
            "|   |   |   |   |--- Hospital <= 4707.50\n",
            "|   |   |   |   |   |--- Medication <= 3.50\n",
            "|   |   |   |   |   |   |--- Billing Amount <= 47870.54\n",
            "|   |   |   |   |   |   |   |--- Doctor <= 8380.00\n",
            "|   |   |   |   |   |   |   |   |--- Age <= 84.50\n",
            "|   |   |   |   |   |   |   |   |   |--- Doctor <= 548.00\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Age <= 74.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Age >  74.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |   |   |--- Doctor >  548.00\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Billing Amount <= 41937.72\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Billing Amount >  41937.72\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3\n",
            "|   |   |   |   |   |   |   |   |--- Age >  84.50\n",
            "|   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |--- Doctor >  8380.00\n",
            "|   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |--- Billing Amount >  47870.54\n",
            "|   |   |   |   |   |   |   |--- Date of Admission <= 1008.00\n",
            "|   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |--- Date of Admission >  1008.00\n",
            "|   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |--- Medication >  3.50\n",
            "|   |   |   |   |   |   |--- Room Number <= 218.00\n",
            "|   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |--- Room Number >  218.00\n",
            "|   |   |   |   |   |   |   |--- Room Number <= 456.50\n",
            "|   |   |   |   |   |   |   |   |--- Blood Type <= 6.50\n",
            "|   |   |   |   |   |   |   |   |   |--- Medical Condition <= 4.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |   |   |--- Medical Condition >  4.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Age <= 64.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Age >  64.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |   |--- Blood Type >  6.50\n",
            "|   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |--- Room Number >  456.50\n",
            "|   |   |   |   |   |   |   |   |--- Age <= 37.00\n",
            "|   |   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |   |--- Age >  37.00\n",
            "|   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |--- Hospital >  4707.50\n",
            "|   |   |   |   |   |--- Admission Type <= 0.50\n",
            "|   |   |   |   |   |   |--- Room Number <= 368.00\n",
            "|   |   |   |   |   |   |   |--- Name <= 79.50\n",
            "|   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |--- Name >  79.50\n",
            "|   |   |   |   |   |   |   |   |--- Name <= 473.50\n",
            "|   |   |   |   |   |   |   |   |   |--- Billing Amount <= 43992.44\n",
            "|   |   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |   |   |--- Billing Amount >  43992.44\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Name <= 292.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Name >  292.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |   |--- Name >  473.50\n",
            "|   |   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |--- Room Number >  368.00\n",
            "|   |   |   |   |   |   |   |--- Doctor <= 2175.50\n",
            "|   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |--- Doctor >  2175.50\n",
            "|   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |--- Admission Type >  0.50\n",
            "|   |   |   |   |   |   |--- Insurance Provider <= 3.50\n",
            "|   |   |   |   |   |   |   |--- Date of Admission <= 1236.50\n",
            "|   |   |   |   |   |   |   |   |--- Blood Type <= 2.50\n",
            "|   |   |   |   |   |   |   |   |   |--- Gender <= 0.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Room Number <= 452.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Room Number >  452.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |   |   |--- Gender >  0.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Billing Amount <= 28213.24\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Billing Amount >  28213.24\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |   |--- Blood Type >  2.50\n",
            "|   |   |   |   |   |   |   |   |   |--- Blood Type <= 5.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Date of Admission <= 992.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Date of Admission >  992.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |   |   |--- Blood Type >  5.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |--- Date of Admission >  1236.50\n",
            "|   |   |   |   |   |   |   |   |--- Date of Admission <= 1349.50\n",
            "|   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |   |--- Date of Admission >  1349.50\n",
            "|   |   |   |   |   |   |   |   |   |--- Date of Admission <= 1597.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |   |   |--- Date of Admission >  1597.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Insurance Provider <= 1.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Insurance Provider >  1.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2\n",
            "|   |   |   |   |   |   |--- Insurance Provider >  3.50\n",
            "|   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |--- Doctor >  8661.50\n",
            "|   |   |--- Medication <= 2.50\n",
            "|   |   |   |--- Gender <= 0.50\n",
            "|   |   |   |   |--- Age <= 26.50\n",
            "|   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |--- Age >  26.50\n",
            "|   |   |   |   |   |--- Name <= 440.00\n",
            "|   |   |   |   |   |   |--- Room Number <= 177.00\n",
            "|   |   |   |   |   |   |   |--- Insurance Provider <= 3.00\n",
            "|   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |--- Insurance Provider >  3.00\n",
            "|   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |--- Room Number >  177.00\n",
            "|   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |--- Name >  440.00\n",
            "|   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |--- Gender >  0.50\n",
            "|   |   |   |   |--- Billing Amount <= 15695.98\n",
            "|   |   |   |   |   |--- Room Number <= 224.50\n",
            "|   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |--- Room Number >  224.50\n",
            "|   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |--- Billing Amount >  15695.98\n",
            "|   |   |   |   |   |--- Date of Admission <= 167.50\n",
            "|   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |--- Date of Admission >  167.50\n",
            "|   |   |   |   |   |   |--- Date of Admission <= 1594.00\n",
            "|   |   |   |   |   |   |   |--- Age <= 78.50\n",
            "|   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |--- Age >  78.50\n",
            "|   |   |   |   |   |   |   |   |--- Date of Admission <= 973.50\n",
            "|   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |   |--- Date of Admission >  973.50\n",
            "|   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |--- Date of Admission >  1594.00\n",
            "|   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |--- Medication >  2.50\n",
            "|   |   |   |--- Age <= 25.50\n",
            "|   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |--- Age >  25.50\n",
            "|   |   |   |   |--- Admission Type <= 0.50\n",
            "|   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |--- Admission Type >  0.50\n",
            "|   |   |   |   |   |--- Blood Type <= 6.00\n",
            "|   |   |   |   |   |   |--- Insurance Provider <= 0.50\n",
            "|   |   |   |   |   |   |   |--- Gender <= 0.50\n",
            "|   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |--- Gender >  0.50\n",
            "|   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |--- Insurance Provider >  0.50\n",
            "|   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |--- Blood Type >  6.00\n",
            "|   |   |   |   |   |   |--- class: Abnormal\n",
            "|--- Name >  500.50\n",
            "|   |--- Name <= 8999.50\n",
            "|   |   |--- Name <= 616.50\n",
            "|   |   |   |--- Doctor <= 5288.00\n",
            "|   |   |   |   |--- Medical Condition <= 2.50\n",
            "|   |   |   |   |   |--- Age <= 33.00\n",
            "|   |   |   |   |   |   |--- Name <= 610.50\n",
            "|   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |--- Name >  610.50\n",
            "|   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |--- Age >  33.00\n",
            "|   |   |   |   |   |   |--- Billing Amount <= 22111.61\n",
            "|   |   |   |   |   |   |   |--- Name <= 514.00\n",
            "|   |   |   |   |   |   |   |   |--- Gender <= 0.50\n",
            "|   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |   |--- Gender >  0.50\n",
            "|   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |--- Name >  514.00\n",
            "|   |   |   |   |   |   |   |   |--- Hospital <= 7280.50\n",
            "|   |   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |   |--- Hospital >  7280.50\n",
            "|   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |--- Billing Amount >  22111.61\n",
            "|   |   |   |   |   |   |   |--- Medication <= 2.50\n",
            "|   |   |   |   |   |   |   |   |--- Hospital <= 3243.00\n",
            "|   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |   |--- Hospital >  3243.00\n",
            "|   |   |   |   |   |   |   |   |   |--- Date of Admission <= 845.00\n",
            "|   |   |   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |   |   |--- Date of Admission >  845.00\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Doctor <= 1554.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Doctor >  1554.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |--- Medication >  2.50\n",
            "|   |   |   |   |   |   |   |   |--- Age <= 36.50\n",
            "|   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |   |--- Age >  36.50\n",
            "|   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |--- Medical Condition >  2.50\n",
            "|   |   |   |   |   |--- Age <= 62.00\n",
            "|   |   |   |   |   |   |--- Billing Amount <= 48225.22\n",
            "|   |   |   |   |   |   |   |--- Date of Admission <= 525.00\n",
            "|   |   |   |   |   |   |   |   |--- Hospital <= 3138.00\n",
            "|   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |   |--- Hospital >  3138.00\n",
            "|   |   |   |   |   |   |   |   |   |--- Room Number <= 282.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |   |   |--- Room Number >  282.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |--- Date of Admission >  525.00\n",
            "|   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |--- Billing Amount >  48225.22\n",
            "|   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |--- Age >  62.00\n",
            "|   |   |   |   |   |   |--- Hospital <= 6151.00\n",
            "|   |   |   |   |   |   |   |--- Insurance Provider <= 2.00\n",
            "|   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |--- Insurance Provider >  2.00\n",
            "|   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |--- Hospital >  6151.00\n",
            "|   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |--- Doctor >  5288.00\n",
            "|   |   |   |   |--- Room Number <= 471.00\n",
            "|   |   |   |   |   |--- Hospital <= 7326.00\n",
            "|   |   |   |   |   |   |--- Doctor <= 7009.50\n",
            "|   |   |   |   |   |   |   |--- Medication <= 0.50\n",
            "|   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |--- Medication >  0.50\n",
            "|   |   |   |   |   |   |   |   |--- Medical Condition <= 3.00\n",
            "|   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |   |--- Medical Condition >  3.00\n",
            "|   |   |   |   |   |   |   |   |   |--- Age <= 71.00\n",
            "|   |   |   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |   |   |--- Age >  71.00\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Room Number <= 201.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Room Number >  201.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |--- Doctor >  7009.50\n",
            "|   |   |   |   |   |   |   |--- Discharge Date <= 81.50\n",
            "|   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |--- Discharge Date >  81.50\n",
            "|   |   |   |   |   |   |   |   |--- Discharge Date <= 1796.00\n",
            "|   |   |   |   |   |   |   |   |   |--- Hospital <= 2223.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Age <= 43.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Age >  43.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |   |   |--- Hospital >  2223.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Medication <= 3.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Medication >  3.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2\n",
            "|   |   |   |   |   |   |   |   |--- Discharge Date >  1796.00\n",
            "|   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |--- Hospital >  7326.00\n",
            "|   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |--- Room Number >  471.00\n",
            "|   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |--- Name >  616.50\n",
            "|   |   |   |--- Name <= 623.50\n",
            "|   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |--- Name >  623.50\n",
            "|   |   |   |   |--- Doctor <= 2096.50\n",
            "|   |   |   |   |   |--- Hospital <= 8580.50\n",
            "|   |   |   |   |   |   |--- Medical Condition <= 2.50\n",
            "|   |   |   |   |   |   |   |--- Room Number <= 394.50\n",
            "|   |   |   |   |   |   |   |   |--- Date of Admission <= 480.00\n",
            "|   |   |   |   |   |   |   |   |   |--- Discharge Date <= 263.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Age <= 70.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Age >  70.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4\n",
            "|   |   |   |   |   |   |   |   |   |--- Discharge Date >  263.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Room Number <= 383.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Room Number >  383.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |   |--- Date of Admission >  480.00\n",
            "|   |   |   |   |   |   |   |   |   |--- Billing Amount <= 35678.38\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Doctor <= 1073.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Doctor >  1073.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9\n",
            "|   |   |   |   |   |   |   |   |   |--- Billing Amount >  35678.38\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Discharge Date <= 1147.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Discharge Date >  1147.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9\n",
            "|   |   |   |   |   |   |   |--- Room Number >  394.50\n",
            "|   |   |   |   |   |   |   |   |--- Room Number <= 465.50\n",
            "|   |   |   |   |   |   |   |   |   |--- Room Number <= 411.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Medication <= 0.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Medication >  0.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6\n",
            "|   |   |   |   |   |   |   |   |   |--- Room Number >  411.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Billing Amount <= 45964.90\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Billing Amount >  45964.90\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2\n",
            "|   |   |   |   |   |   |   |   |--- Room Number >  465.50\n",
            "|   |   |   |   |   |   |   |   |   |--- Room Number <= 469.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |   |   |--- Room Number >  469.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Age <= 82.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Age >  82.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |--- Medical Condition >  2.50\n",
            "|   |   |   |   |   |   |   |--- Hospital <= 222.50\n",
            "|   |   |   |   |   |   |   |   |--- Discharge Date <= 712.50\n",
            "|   |   |   |   |   |   |   |   |   |--- Medication <= 0.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Date of Admission <= 416.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Date of Admission >  416.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |   |   |--- Medication >  0.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Name <= 7790.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Name >  7790.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |   |--- Discharge Date >  712.50\n",
            "|   |   |   |   |   |   |   |   |   |--- Name <= 7031.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Date of Admission <= 1705.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Date of Admission >  1705.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2\n",
            "|   |   |   |   |   |   |   |   |   |--- Name >  7031.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Admission Type <= 0.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Admission Type >  0.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |--- Hospital >  222.50\n",
            "|   |   |   |   |   |   |   |   |--- Hospital <= 498.50\n",
            "|   |   |   |   |   |   |   |   |   |--- Blood Type <= 3.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Room Number <= 310.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Room Number >  310.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2\n",
            "|   |   |   |   |   |   |   |   |   |--- Blood Type >  3.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Hospital <= 242.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Hospital >  242.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |   |--- Hospital >  498.50\n",
            "|   |   |   |   |   |   |   |   |   |--- Hospital <= 1283.00\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Name <= 4072.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Name >  4072.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6\n",
            "|   |   |   |   |   |   |   |   |   |--- Hospital >  1283.00\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Insurance Provider <= 2.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Insurance Provider >  2.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9\n",
            "|   |   |   |   |   |--- Hospital >  8580.50\n",
            "|   |   |   |   |   |   |--- Date of Admission <= 31.00\n",
            "|   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |--- Date of Admission >  31.00\n",
            "|   |   |   |   |   |   |   |--- Room Number <= 468.00\n",
            "|   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |--- Room Number >  468.00\n",
            "|   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |--- Doctor >  2096.50\n",
            "|   |   |   |   |   |--- Billing Amount <= 45555.95\n",
            "|   |   |   |   |   |   |--- Billing Amount <= 45499.75\n",
            "|   |   |   |   |   |   |   |--- Hospital <= 320.50\n",
            "|   |   |   |   |   |   |   |   |--- Hospital <= 70.50\n",
            "|   |   |   |   |   |   |   |   |   |--- Billing Amount <= 8059.06\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Hospital <= 11.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Hospital >  11.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |   |   |--- Billing Amount >  8059.06\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Billing Amount <= 39360.23\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Billing Amount >  39360.23\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |   |--- Hospital >  70.50\n",
            "|   |   |   |   |   |   |   |   |   |--- Room Number <= 107.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |   |   |--- Room Number >  107.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Name <= 3198.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Name >  3198.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9\n",
            "|   |   |   |   |   |   |   |--- Hospital >  320.50\n",
            "|   |   |   |   |   |   |   |   |--- Billing Amount <= 1561.69\n",
            "|   |   |   |   |   |   |   |   |   |--- Discharge Date <= 360.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Name <= 1736.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Name >  1736.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2\n",
            "|   |   |   |   |   |   |   |   |   |--- Discharge Date >  360.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Discharge Date <= 1152.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Discharge Date >  1152.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7\n",
            "|   |   |   |   |   |   |   |   |--- Billing Amount >  1561.69\n",
            "|   |   |   |   |   |   |   |   |   |--- Billing Amount <= 1604.27\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Discharge Date <= 88.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Discharge Date >  88.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |   |   |--- Billing Amount >  1604.27\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Name <= 1979.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Name >  1979.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9\n",
            "|   |   |   |   |   |   |--- Billing Amount >  45499.75\n",
            "|   |   |   |   |   |   |   |--- Medication <= 1.00\n",
            "|   |   |   |   |   |   |   |   |--- Billing Amount <= 45546.49\n",
            "|   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |   |--- Billing Amount >  45546.49\n",
            "|   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |--- Medication >  1.00\n",
            "|   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |--- Billing Amount >  45555.95\n",
            "|   |   |   |   |   |   |--- Billing Amount <= 45688.19\n",
            "|   |   |   |   |   |   |   |--- Medication <= 0.50\n",
            "|   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |--- Medication >  0.50\n",
            "|   |   |   |   |   |   |   |   |--- Room Number <= 490.00\n",
            "|   |   |   |   |   |   |   |   |   |--- Room Number <= 407.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |   |   |--- Room Number >  407.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Discharge Date <= 466.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Discharge Date >  466.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |   |--- Room Number >  490.00\n",
            "|   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |--- Billing Amount >  45688.19\n",
            "|   |   |   |   |   |   |   |--- Doctor <= 2560.00\n",
            "|   |   |   |   |   |   |   |   |--- Blood Type <= 3.50\n",
            "|   |   |   |   |   |   |   |   |   |--- Room Number <= 228.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Hospital <= 5418.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Hospital >  5418.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |   |   |--- Room Number >  228.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Insurance Provider <= 3.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Insurance Provider >  3.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |   |--- Blood Type >  3.50\n",
            "|   |   |   |   |   |   |   |   |   |--- Discharge Date <= 1649.00\n",
            "|   |   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |   |   |--- Discharge Date >  1649.00\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Medical Condition <= 4.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Medical Condition >  4.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |--- Doctor >  2560.00\n",
            "|   |   |   |   |   |   |   |   |--- Name <= 2389.00\n",
            "|   |   |   |   |   |   |   |   |   |--- Doctor <= 5564.00\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Billing Amount <= 47505.66\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Billing Amount >  47505.66\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 5\n",
            "|   |   |   |   |   |   |   |   |   |--- Doctor >  5564.00\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Billing Amount <= 46443.38\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Billing Amount >  46443.38\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9\n",
            "|   |   |   |   |   |   |   |   |--- Name >  2389.00\n",
            "|   |   |   |   |   |   |   |   |   |--- Date of Admission <= 58.00\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Medical Condition <= 2.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Medical Condition >  2.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2\n",
            "|   |   |   |   |   |   |   |   |   |--- Date of Admission >  58.00\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Blood Type <= 5.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 9\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Blood Type >  5.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 8\n",
            "|   |--- Name >  8999.50\n",
            "|   |   |--- Name <= 9028.50\n",
            "|   |   |   |--- Hospital <= 7818.50\n",
            "|   |   |   |   |--- Medical Condition <= 1.50\n",
            "|   |   |   |   |   |--- Age <= 59.50\n",
            "|   |   |   |   |   |   |--- Medication <= 2.50\n",
            "|   |   |   |   |   |   |   |--- Billing Amount <= 19863.42\n",
            "|   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |--- Billing Amount >  19863.42\n",
            "|   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |--- Medication >  2.50\n",
            "|   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |--- Age >  59.50\n",
            "|   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |--- Medical Condition >  1.50\n",
            "|   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |--- Hospital >  7818.50\n",
            "|   |   |   |   |--- class: Abnormal\n",
            "|   |   |--- Name >  9028.50\n",
            "|   |   |   |--- Doctor <= 9281.50\n",
            "|   |   |   |   |--- Hospital <= 5277.00\n",
            "|   |   |   |   |   |--- Doctor <= 341.00\n",
            "|   |   |   |   |   |   |--- Medical Condition <= 3.00\n",
            "|   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |--- Medical Condition >  3.00\n",
            "|   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |--- Doctor >  341.00\n",
            "|   |   |   |   |   |   |--- Doctor <= 3324.50\n",
            "|   |   |   |   |   |   |   |--- Date of Admission <= 1231.00\n",
            "|   |   |   |   |   |   |   |   |--- Age <= 45.00\n",
            "|   |   |   |   |   |   |   |   |   |--- Blood Type <= 1.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |   |   |--- Blood Type >  1.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Hospital <= 3331.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Hospital >  3331.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |   |--- Age >  45.00\n",
            "|   |   |   |   |   |   |   |   |   |--- Hospital <= 205.00\n",
            "|   |   |   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |   |   |--- Hospital >  205.00\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Discharge Date <= 452.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Discharge Date >  452.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2\n",
            "|   |   |   |   |   |   |   |--- Date of Admission >  1231.00\n",
            "|   |   |   |   |   |   |   |   |--- Gender <= 0.50\n",
            "|   |   |   |   |   |   |   |   |   |--- Medical Condition <= 2.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Discharge Date <= 1479.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Discharge Date >  1479.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |   |   |--- Medical Condition >  2.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |   |--- Gender >  0.50\n",
            "|   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |--- Doctor >  3324.50\n",
            "|   |   |   |   |   |   |   |--- Blood Type <= 3.50\n",
            "|   |   |   |   |   |   |   |   |--- Billing Amount <= 41599.40\n",
            "|   |   |   |   |   |   |   |   |   |--- Doctor <= 3906.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |   |   |--- Doctor >  3906.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Name <= 9292.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 7\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Name >  9292.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 4\n",
            "|   |   |   |   |   |   |   |   |--- Billing Amount >  41599.40\n",
            "|   |   |   |   |   |   |   |   |   |--- Billing Amount <= 49661.61\n",
            "|   |   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |   |   |--- Billing Amount >  49661.61\n",
            "|   |   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |--- Blood Type >  3.50\n",
            "|   |   |   |   |   |   |   |   |--- Name <= 9308.50\n",
            "|   |   |   |   |   |   |   |   |   |--- Admission Type <= 0.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Doctor <= 6873.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Doctor >  6873.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2\n",
            "|   |   |   |   |   |   |   |   |   |--- Admission Type >  0.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Doctor <= 8675.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Doctor >  8675.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3\n",
            "|   |   |   |   |   |   |   |   |--- Name >  9308.50\n",
            "|   |   |   |   |   |   |   |   |   |--- Admission Type <= 0.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |   |   |--- Admission Type >  0.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Hospital <= 2778.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Hospital >  2778.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |--- Hospital >  5277.00\n",
            "|   |   |   |   |   |--- Admission Type <= 1.50\n",
            "|   |   |   |   |   |   |--- Hospital <= 6108.50\n",
            "|   |   |   |   |   |   |   |--- Room Number <= 420.50\n",
            "|   |   |   |   |   |   |   |   |--- Blood Type <= 1.50\n",
            "|   |   |   |   |   |   |   |   |   |--- Insurance Provider <= 2.00\n",
            "|   |   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |   |   |--- Insurance Provider >  2.00\n",
            "|   |   |   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |   |--- Blood Type >  1.50\n",
            "|   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |--- Room Number >  420.50\n",
            "|   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |--- Hospital >  6108.50\n",
            "|   |   |   |   |   |   |   |--- Medical Condition <= 4.50\n",
            "|   |   |   |   |   |   |   |   |--- Discharge Date <= 791.50\n",
            "|   |   |   |   |   |   |   |   |   |--- Name <= 9299.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Blood Type <= 3.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Blood Type >  3.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3\n",
            "|   |   |   |   |   |   |   |   |   |--- Name >  9299.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |   |--- Discharge Date >  791.50\n",
            "|   |   |   |   |   |   |   |   |   |--- Age <= 75.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Medical Condition <= 3.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 6\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Medical Condition >  3.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2\n",
            "|   |   |   |   |   |   |   |   |   |--- Age >  75.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |--- Medical Condition >  4.50\n",
            "|   |   |   |   |   |   |   |   |--- Billing Amount <= 40428.74\n",
            "|   |   |   |   |   |   |   |   |   |--- Doctor <= 2828.00\n",
            "|   |   |   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |   |   |--- Doctor >  2828.00\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Insurance Provider <= 3.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Insurance Provider >  3.50\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 2\n",
            "|   |   |   |   |   |   |   |   |--- Billing Amount >  40428.74\n",
            "|   |   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |--- Admission Type >  1.50\n",
            "|   |   |   |   |   |   |--- Medical Condition <= 3.50\n",
            "|   |   |   |   |   |   |   |--- Room Number <= 477.50\n",
            "|   |   |   |   |   |   |   |   |--- Age <= 26.50\n",
            "|   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |   |--- Age >  26.50\n",
            "|   |   |   |   |   |   |   |   |   |--- Hospital <= 6128.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Billing Amount <= 26949.21\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Billing Amount >  26949.21\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3\n",
            "|   |   |   |   |   |   |   |   |   |--- Hospital >  6128.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Age <= 80.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- truncated branch of depth 3\n",
            "|   |   |   |   |   |   |   |   |   |   |--- Age >  80.00\n",
            "|   |   |   |   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |--- Room Number >  477.50\n",
            "|   |   |   |   |   |   |   |   |--- Discharge Date <= 904.00\n",
            "|   |   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |   |--- Discharge Date >  904.00\n",
            "|   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |--- Medical Condition >  3.50\n",
            "|   |   |   |   |   |   |   |--- Age <= 57.50\n",
            "|   |   |   |   |   |   |   |   |--- Blood Type <= 1.00\n",
            "|   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |   |   |   |   |   |--- Blood Type >  1.00\n",
            "|   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |--- Age >  57.50\n",
            "|   |   |   |   |   |   |   |   |--- Insurance Provider <= 2.50\n",
            "|   |   |   |   |   |   |   |   |   |--- Discharge Date <= 1556.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- class: Abnormal\n",
            "|   |   |   |   |   |   |   |   |   |--- Discharge Date >  1556.50\n",
            "|   |   |   |   |   |   |   |   |   |   |--- class: Inconclusive\n",
            "|   |   |   |   |   |   |   |   |--- Insurance Provider >  2.50\n",
            "|   |   |   |   |   |   |   |   |   |--- class: Normal\n",
            "|   |   |   |--- Doctor >  9281.50\n",
            "|   |   |   |   |--- class: Inconclusive\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "# **Logistic Regression**\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "e5-9WB07MbuL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "# Chọn cột cần dự đoán và các cột đặc trưng\n",
        "y = df['Test Results']\n",
        "features = ['Age', 'Gender', 'Blood Type', 'Medical Condition', 'Medication']\n",
        "\n",
        "# Chọn các cột đặc trưng\n",
        "X = df[features]\n",
        "\n",
        "# Tiêu chuẩn hóa các cột số\n",
        "scaler = StandardScaler()\n",
        "X_numeric_scaled = scaler.fit_transform(X.select_dtypes(include=[np.number]))\n",
        "\n",
        "# Ghép lại các cột sau khi tiêu chuẩn hóa\n",
        "X_scaled = pd.DataFrame(X_numeric_scaled, columns=X.select_dtypes(include=[np.number]).columns, index=X.index)\n",
        "\n",
        "# Chia dữ liệu thành tập huấn luyện và tập kiểm thử\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Định nghĩa mô hình hồi quy logistic\n",
        "logistic_classifier = LogisticRegression(random_state=42)\n",
        "\n",
        "# Kiểm tra lại độ chính xác của mô hình Logistic Regression\n",
        "logistic_classifier.fit(X_train, y_train)\n",
        "logistic_pred = logistic_classifier.predict(X_test)\n",
        "logistic_accuracy = accuracy_score(y_test, logistic_pred)\n",
        "\n",
        "print(f'Độ chính xác của mô hình Logistic Regression: {logistic_accuracy:.2f}')\n",
        "print('Báo cáo phân loại:')\n",
        "print(classification_report(y_test, logistic_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Nc-8O_tTICMB",
        "outputId": "6ac0aaa8-7205-487f-9f2c-f1a5ce6d37f7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Độ chính xác của mô hình Logistic Regression: 0.35\n",
            "Báo cáo phân loại:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "    Abnormal       0.35      0.86      0.50       706\n",
            "Inconclusive       0.33      0.14      0.20       636\n",
            "      Normal       0.00      0.00      0.00       658\n",
            "\n",
            "    accuracy                           0.35      2000\n",
            "   macro avg       0.23      0.34      0.23      2000\n",
            "weighted avg       0.23      0.35      0.24      2000\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import roc_curve, auc\n",
        "from sklearn.preprocessing import label_binarize\n",
        "# Chuyển đổi nhãn thành định dạng nhị phân\n",
        "y_train_bin = label_binarize(y_train, classes=['Normal', 'Abnormal', 'Inconclusive'])\n",
        "y_test_bin = label_binarize(y_test, classes=['Normal', 'Abnormal', 'Inconclusive'])\n",
        "\n",
        "# Khởi tạo OneVsRestClassifier với Logistic Regression\n",
        "logistic_classifier = OneVsRestClassifier(LogisticRegression(random_state=42))\n",
        "\n",
        "# Fit mô hình\n",
        "logistic_classifier.fit(X_train_scaled, y_train)\n",
        "\n",
        "# Dự đoán xác suất cho mỗi lớp trên tập kiểm thử\n",
        "y_probs = logistic_classifier.predict_proba(X_test_scaled)\n",
        "\n",
        "# Tính đường cong ROC và AUC cho mỗi lớp\n",
        "fpr = dict()\n",
        "tpr = dict()\n",
        "roc_auc = dict()\n",
        "for i in range(y_test_bin.shape[1]):\n",
        "    fpr[i], tpr[i], _ = roc_curve(y_test_bin[:, i], y_probs[:, i])\n",
        "    roc_auc[i] = auc(fpr[i], tpr[i])\n",
        "\n",
        "# Vẽ đường cong ROC\n",
        "plt.figure(figsize=(8, 6))\n",
        "for i in range(y_test_bin.shape[1]):\n",
        "    plt.plot(fpr[i], tpr[i], lw=2, label=f'Lớp {i} (AUC = {roc_auc[i]:.2f})')\n",
        "\n",
        "plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n",
        "plt.xlabel('Tỷ lệ False Positive (FPR)')\n",
        "plt.ylabel('Tỷ lệ True Positive (TPR)')\n",
        "plt.title('Đường cong ROC đa lớp cho Logistic Regression')\n",
        "plt.legend(loc='lower right')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 566
        },
        "id": "By_RnbntJxLB",
        "outputId": "34a206a9-790c-498f-d238-acb27505da08"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Độ chính xác của từng mô hình\n",
        "accuracy_scores = [gb_accuracy, dt_accuracy, accuracy,logistic_accuracy]\n",
        "\n",
        "# Tên của từng mô hình\n",
        "model_names = , 'Decision Tree', 'Random Forest','Logistic Regression']\n",
        "\n",
        "# Vẽ biểu đồ cột\n",
        "plt.bar(model_names, accuracy_scores, color=[ 'green', 'orange','red'])\n",
        "plt.xlabel('Mô hình')\n",
        "plt.ylabel('Độ chính xác')\n",
        "plt.title('So sánh độ chính xác của các mô hình')\n",
        "plt.ylim(0, 1)  # Điều chỉnh phạm vi trục y nếu cần thiết\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 144
        },
        "id": "HLezhS34s-SZ",
        "outputId": "97267175-23cc-48c8-f4b2-eb7c232931dd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-1-34f5b4e547af>\"\u001b[0;36m, line \u001b[0;32m5\u001b[0m\n\u001b[0;31m    model_names = , 'Decision Tree', 'Random Forest','Logistic Regression']\u001b[0m\n\u001b[0m                                                                          ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m unmatched ']'\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**1. Mục Đích:**\n",
        "\n",
        "Mô hình phân loại được xây dựng để dự đoán kết quả xét nghiệm sức khỏe.\n",
        "\n",
        "**2. Dữ Liệu:**\n",
        "\n",
        "Tập dữ liệu được sử dụng từ tệp \"health_classification.csv\".\n",
        "\n",
        "**3. Tiền Xử Lý Dữ Liệu:**\n",
        "\n",
        "Loại bỏ cột \"Insurance Provider\".\n",
        "Mã hóa nhãn cho các biến phân loại.\n",
        "Chia dữ liệu thành tập huấn luyện và tập kiểm thử.\n",
        "\n",
        "**4. Mô Hình Phân Loại:**\n",
        "\n",
        "a. Logistic Regression:\n",
        "\n",
        "Độ chính xác: 0.35\n",
        "Báo cáo phân loại: F1-score thấp cho mỗi lớp.\n",
        "\n",
        "b. Decision Tree:\n",
        "\n",
        "Độ chính xác: 0.3195\n",
        "Hiệu suất thấp, cần điều chỉnh thêm thông số.\n",
        "\n",
        "c. Random Forest:\n",
        "\n",
        "Độ chính xác: 0.33\n",
        "Báo cáo phân loại: Kết quả tương tự như Decision Tree.\n",
        "\n",
        "**5. Kết Luận:**\n",
        "\n",
        "Logistic Regression có vẻ có độ chính xác cao hơn, nhưng cả ba mô hình đều đạt hiệu suất thấp.\n",
        "Cần xem xét thêm các chỉ số như F1-score, precision, recall để đánh giá toàn diện hơn về khả năng dự đoán của mô hình."
      ],
      "metadata": {
        "id": "Durt85bdQPs4"
      }
    }
  ]
}